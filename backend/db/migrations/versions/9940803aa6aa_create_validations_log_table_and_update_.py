# File: backend/db/migrations/script.py.mako
"""Create validations_log table and update models

Revision ID: 9940803aa6aa
Revises: d472f6b2079b
Create Date: 2025-09-19 11:56:15.459592

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector

# revision identifiers, used by Alembic.
revision = '9940803aa6aa'
down_revision = 'd472f6b2079b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('validations_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_key', sa.String(), nullable=False),
    sa.Column('module', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('missing_fields', sa.JSON(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('llm_provider_model', sa.String(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_validations_log_id'), 'validations_log', ['id'], unique=False)
    op.create_index(op.f('ix_validations_log_ticket_key'), 'validations_log', ['ticket_key'], unique=False)
    op.drop_table('extraction_patterns')
    op.drop_index(op.f('ix_validations_ticket_id'), table_name='validations')
    op.drop_table('validations')
    op.add_column('actions_log', sa.Column('ticket_key', sa.String(), nullable=False))
    op.alter_column('actions_log', 'action_type',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('actions_log', 'details',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ix_actions_log_ticket_id'), table_name='actions_log')
    op.create_index(op.f('ix_actions_log_id'), 'actions_log', ['id'], unique=False)
    op.create_index(op.f('ix_actions_log_ticket_key'), 'actions_log', ['ticket_key'], unique=False)
    op.drop_column('actions_log', 'timestamp')
    op.drop_column('actions_log', 'ticket_id')
    op.add_column('jira_tickets', sa.Column('ticket_key', sa.String(), nullable=False))
    op.alter_column('jira_tickets', 'summary',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('jira_tickets', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ix_jira_tickets_ticket_id'), table_name='jira_tickets')
    op.create_index(op.f('ix_jira_tickets_id'), 'jira_tickets', ['id'], unique=False)
    op.create_index(op.f('ix_jira_tickets_ticket_key'), 'jira_tickets', ['ticket_key'], unique=True)
    op.drop_column('jira_tickets', 'embedding')
    op.drop_column('jira_tickets', 'ticket_id')
    op.drop_column('jira_tickets', 'created_at')
    op.drop_column('jira_tickets', 'resolution')
    op.create_index(op.f('ix_mandatory_field_templates_id'), 'mandatory_field_templates', ['id'], unique=False)
    op.drop_column('mandatory_field_templates', 'description')
    op.alter_column('modules_taxonomy', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.create_index(op.f('ix_modules_taxonomy_id'), 'modules_taxonomy', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_modules_taxonomy_id'), table_name='modules_taxonomy')
    op.alter_column('modules_taxonomy', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('mandatory_field_templates', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_mandatory_field_templates_id'), table_name='mandatory_field_templates')
    op.add_column('jira_tickets', sa.Column('resolution', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('jira_tickets', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('jira_tickets', sa.Column('ticket_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('jira_tickets', sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_jira_tickets_ticket_key'), table_name='jira_tickets')
    op.drop_index(op.f('ix_jira_tickets_id'), table_name='jira_tickets')
    op.create_index(op.f('ix_jira_tickets_ticket_id'), 'jira_tickets', ['ticket_id'], unique=True)
    op.alter_column('jira_tickets', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('jira_tickets', 'summary',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('jira_tickets', 'ticket_key')
    op.add_column('actions_log', sa.Column('ticket_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('actions_log', sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_actions_log_ticket_key'), table_name='actions_log')
    op.drop_index(op.f('ix_actions_log_id'), table_name='actions_log')
    op.create_index(op.f('ix_actions_log_ticket_id'), 'actions_log', ['ticket_id'], unique=False)
    op.alter_column('actions_log', 'details',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('actions_log', 'action_type',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('actions_log', 'ticket_key')
    op.create_table('validations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticket_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('missing_fields', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('validations_pkey'))
    )
    op.create_index(op.f('ix_validations_ticket_id'), 'validations', ['ticket_id'], unique=False)
    op.create_table('extraction_patterns',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('field_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pattern_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pattern', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['mandatory_field_templates.id'], name=op.f('extraction_patterns_field_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('extraction_patterns_pkey'))
    )
    op.drop_index(op.f('ix_validations_log_ticket_key'), table_name='validations_log')
    op.drop_index(op.f('ix_validations_log_id'), table_name='validations_log')
    op.drop_table('validations_log')
    # ### end Alembic commands ###
