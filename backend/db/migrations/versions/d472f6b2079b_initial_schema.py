# File: backend/db/migrations/versions/d472f6b2079b_initial_schema.py
"""Initial schema

Revision ID: d472f6b2079b
Revises: 
Create Date: 2025-09-17 12:34:28.665378

"""
from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision = 'd472f6b2079b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Enable the pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")

    op.create_table('actions_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_actions_log_ticket_id'), 'actions_log', ['ticket_id'], unique=False)
    op.create_table('jira_tickets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('resolution', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.VECTOR(384), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_jira_tickets_ticket_id'), 'jira_tickets', ['ticket_id'], unique=True)
    op.create_table('modules_taxonomy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('module_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_modules_taxonomy_module_name'), 'modules_taxonomy', ['module_name'], unique=True)
    op.create_table('validations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('missing_fields', sa.Text(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_validations_ticket_id'), 'validations', ['ticket_id'], unique=False)
    op.create_table('mandatory_field_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('module_id', sa.Integer(), nullable=False),
    sa.Column('field_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['module_id'], ['modules_taxonomy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('extraction_patterns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('field_id', sa.Integer(), nullable=False),
    sa.Column('pattern_type', sa.String(), nullable=True),
    sa.Column('pattern', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['mandatory_field_templates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('extraction_patterns')
    op.drop_table('mandatory_field_templates')
    op.drop_index(op.f('ix_validations_ticket_id'), table_name='validations')
    op.drop_table('validations')
    op.drop_index(op.f('ix_modules_taxonomy_module_name'), table_name='modules_taxonomy')
    op.drop_table('modules_taxonomy')
    op.drop_index(op.f('ix_jira_tickets_ticket_id'), table_name='jira_tickets')
    op.drop_table('jira_tickets')
    op.drop_index(op.f('ix_actions_log_ticket_id'), table_name='actions_log')
    op.drop_table('actions_log')
    
    # Disable the pgvector extension
    op.execute("DROP EXTENSION IF EXISTS vector;")
    # ### end Alembic commands ###
