# File: backend/api/schemas.py
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any

class KnowledgeUploadResponse(BaseModel):
    """
    Defines the response structure after a knowledge file upload attempt.
    """
    filename: str
    status: str
    message: str
    rows_processed: int
    rows_upserted: int
    errors: List[str] = []


class SolvedTicketsUploadResponse(BaseModel):
    filename: str
    status: str
    message: str
    rows_processed: int
    rows_upserted: int
    errors: List[str] = []


class JiraIssue(BaseModel):
    key: str

class JiraWebhookPayload(BaseModel):
    issue: JiraIssue
    webhook_event: Optional[str] = Field(None, alias='webhookEvent')
    user: Optional[Dict[str, Any]] = None
    comment: Optional[Dict[str, Any]] = None
    
# --- ADMIN UI MODELS ---
class CompleteTicket(BaseModel):
    """Represents a ticket that has been validated as 'complete' and is ready for resolution."""
    ticket_key: str
    module: str
    confidence: float
    validated_at: Optional[str] = None
    
class Solution(BaseModel):
    """Represents a solution alternative generated by the LLM."""
    solution_text: str
    confidence: float
    llm_provider_model: str
    sources: List[Dict] = []
    
class SolutionApproval(BaseModel):
    """Request model for posting a human-approved solution."""
    solution_text: str
    llm_provider_model: Optional[str] = "human-approved"
    draft_id: Optional[int] = None

